# NEW INPUT

dryrun=off        # don't actually calculate (good for tuning grids, etc.)
mpirun=off        # run in parallel mode
title=""
basis="@CMAKE_CURRENT_SOURCE_DIR@/mol"
density="@CMAKE_CURRENT_SOURCE_DIR@/XDENS"
spherical=off     # don't touch, unless you REALLY know what you are doing
debug=1           # debug print level
diamag=on           # turn on/off diamagnetic contributions
paramag=on          # turn on/off paramagnetic contributions
GIAO=on             # turn on/off GIAOs. Don't change unless you know why.
openshell=false 
screening=on        # use screening to speed up 
screen_thrs=1.d-8   # Screening threshold
show_up_axis=true   # mark "up" axis in .xyz files
calc=[cdens]      
# calc=[cdens, integral]  # what to calculate, and in which order
#calc=[integral]
# calc=[cdens, integral, divj, edens]

cdens {           
	magnet_axis=-z #[-] i,j,k || x,y,z -> align magnet along axis
#	magnet=[0.0, -1.0, 0.0]   # magnet vector
	scale_vectors=1.0
	jtensor="JTENSOR"   # file name for the current tensors
	jvector="JVECTOR"   # file name for the current vectors
	grid(base) {    # grid type can be: base/std, bond or file (see below)
		type=even   # even spaced or gauss quadrature distribution on interval
		origin=[-8.0, -8.0, -2.0]  # origin of grid
		ivec=[1.0, 0.0, 0.0]       # basis vector i
		jvec=[ 0.0, 1.0, 0.0]      # basis vector j ( k = i x j )
		lengths=[16.0, 16.0, 4.0]    # lenthts of (i,j,k)
		spacing=[1.0, 1.0, 1.0] # spacing of points on grid (i,j,k)
#         grid_points=[50,50,0]   # number of gridpoints on grid (i,j,k)
		rotation=[0.0,0.0,0.0]  # Rotation of (i,j,k) -> (i',j',k') in degrees
								   # Euler angles, x-y-z convention
	}
## Read in grid from external file. 
# grid(file) {   
#     file=gridfile.grd
# }

	plot {          # file names for plots
		vector="JVEC"   
		modulus="JMOD"
		cube_mod="jmod"
		gopenmol="jmod.plt"
		#projection="JPRJ"
	}
}
	


integral {
	magnet_axis=T 
#	magnet=[0.0, -1.0, 0.0]   
	modulus=off                      # calculate the |J| integral
	spin=total                       # total, alpha, beta
	grid(bond) {                     # define grid orthogonal to a bond 
		type=gauss                   # gauss distribution of grid points
#         origin=[0.0, 0.0, 0.0]     # fix grid orientation
#         bond=[1,2]                  # atom indeces for bond
#         fixpoint=5
		bond=[1,2]                  # atom indeces for bond
		fixpoint=5
#		coord1=[0.0, 0.0, 2.145166]  # "atom" coordinates
#		coord2=[0.0, 0.0, -2.145166] 
#		fixcoord=[0.0, 0.0, 0.0]
		distance=1.5               # place grid 'distance' between atoms
        ## Either grid_points or spacing can be specified. The number of grid
        ## points will be rounded upwards to nearest multiple of gauss_order
		gauss_order=9                # order for gauss quadrature
	   grid_points=[30,30,0]        # number of gridpoints on grid (i,j,k)
#         spacing=[0.1, 0.1, 0.1]      # spacing of points on grid (i,j,k)
		up=4.0
		down=4.0
		in=1.0
		out=6.0
#         height=[-5.0, 5.0]
#         width=[-5.0, 5.0]
		rotation=[0.0,0.0,0.0]          # Rotation of (i,j,k) -> (i',j',k') 
#		radius=1.0                   # round grid: cut off at radius
	}
# Advanced options, refer to the souece for details
	tensor=off       # integrate the tensor components
	interpolate=off  # do integration on even spaced grid by interpolation
	lip_order=5      # order of Lagrange Interpolating Polynominals to use
}

divj {
	magnet_axis=y 
#	magnet=[0.0, -1.0, 0.0]   
	gopenmol='divj.plt'
	grid(base) {    # grid type can be: base/std, bond or file (see below)
		type=even   # even spaced or gauss quadrature distribution on interval
		origin=[-8.0, -8.0, 0.0]  # origin of grid
		ivec=[1.0, 0.0, 0.0]       # basis vector i
		jvec=[ 0.0, 1.0, 0.0]      # basis vector j ( k = i x j )
		lengths=[16.0, 16.0, 0.0]    # lenthts of (i,j,k)
		spacing=[0.5, 0.5, 0.5] # spacing of points on grid (i,j,k)
	#	grid_points=[50,50,0]   # number of gridpoints on grid (i,j,k)
		rotation=[0.0,0.0,0.0]  # Rotation of (i,j,k) -> (i',j',k') in degrees
								   # Euler angles, x-y-z convention
	}
}

edens {
	density='EDENS'
	density_plot='edens_plt.txt'
	gopenmol='edens.plt'
	cube='edens.cube'
	grid(base) {    # grid type can be: base/std, bond or file (see below)
		type=even   # even spaced or gauss quadrature distribution on interval
		origin=[-8.0, -8.0, -8.0]  # origin of grid
		ivec=[1.0, 0.0, 0.0]       # basis vector i
		jvec=[ 0.0, 1.0, 0.0]      # basis vector j ( k = i x j )
		lengths=[16.0, 16.0, 16.0]    # lenthts of (i,j,k)
		spacing=[0.5, 0.5, 0.5] # spacing of points on grid (i,j,k)
	#	grid_points=[50,50,0]   # number of gridpoints on grid (i,j,k)
		rotation=[0.0,0.0,0.0]  # Rotation of (i,j,k) -> (i',j',k') in degrees
								   # Euler angles, x-y-z convention
	}
}

