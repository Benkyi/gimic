# NEW INPUT

	
dryrun=off        # don't actually calculate (good for tuning grids, etc.)
mpirun=off        # run in parallel mode
title="CO2"
basis="mol"
density="XDENS"
spherical=off     # don't touch, unless you REALLY know what you are doing
debug=1           # debug print level
diamag=on           # turn on/off diamagnetic contributions
paramag=on          # turn on/off paramagnetic contributions
openshell=false   
screening=on      # use screening to speed 
screen_thrs=1.d-6
# calc=[cdens]      # what to calculate, and in which order
calc=[cdens, integral]
# calc=[integral]
# calc=[cdens, integral, divj, edens]

cdens { 
	magnet_axis=y #[-] i,j,k or x,y,z or T -> align magnet along axis
#	magnet=[0.0, -1.0, 0.0]   # magnet vector
	scale_vectors=1.0
	spin_density=off          
	jtensor="JTENSOR"   # file name for the current tensors
	jvector="JVECTOR"   # file name for the current vectors
	grid(base) {    # grid type can be: base/std, bond or file (see below)
		type=even   # even spaced or gauss quadrature distribution on interval
		origin=[-4.0,  0.0, -4.0]  # origin of grid
		ivec=[1.0, 0.0, 0.0]       # basis vector i
		jvec=[ 0.0, 0.0, 1.0]      # basis vector j ( k = i x j )
		lengths=[8.0, 8.0, 0.0]    # lenthts of (i,j,k)
		spacing=[0.5, 0.5, 0.5]    # spacing of points on grid (i,j,k)
#     grid_points=[5,5,0]      # number of gridpoints on grid (i,j,k)
		rotation=[0.0,0.0,0.0]    # Rotation of (i,j,k) -> (i',j',k') in degrees
							   # Euler angles, x-y-z convention
	}
	plot(on) {          # file names for plots
		vector="JVEC"   
		modulus="JMOD"
		nvector="NJVEC"
		gopenmol="jmod.plt"
		projection="JPRJ"
	}
## Read in grid from external file. Use the source, Luke.
# grid(file) {   
#     file=myspecialgrid.grd
# }

}

integral {
	magnet_axis=T 
#	magnet=[0.0, -1.0, 0.0]   
	modulus=on                      # calculate the |J| integral
	grid(bond) {                     # define grid orthogonal to a bond 
		type=gauss                   # gauss distribution of grid points
        bond=[2,3]      # define a bond
#         coord1=[0.0, 0.0, 2.145166]  # "atom" coordinates
#         coord2=[0.0, 0.0, -2.145166] 
#         fixpoint=1      # fix magnetic field
		fixcoord=[0.0, 1.0, 0.0] 
		distance=1.096               # place grid 'distance' between atoms
        ## Either grid_points or spacing can be specified. The number of grid
        ## points will be rounded upwards to nearest multiple of gauss_order
		gauss_order=9                # order for gauss quadrature
	   grid_points=[40,40,0]        # number of gridpoints on grid (i,j,k)
#         spacing=[0.1, 0.1, 0.1]      # spacing of points on grid (i,j,k)
		up=6.0            # hight of grid above and below the center
		down=6.0
		in=6.0             # width of grid in and out from the center
		out=6.0
		rotation=[0.0,0.0,0.0]          # Rotation of (i,j,k) -> (i',j',k') 
#		radius=3.0                   # round grid: cut off at radius
	}
# Advanced options, refer to the souece for details
	tensor=off       # integrate the tensor components
	interpolate=off  # do integration on even spaced grid by interpolation
	lip_order=5      # order of Lagrange Interpolating Polynominals to use
}

divj {
	magnet_axis=y 
#	magnet=[0.0, -1.0, 0.0]   
	gopenmol='divj.plt'
	grid(base) { 
		type=even
		origin=[-4.0, 0.0, -4.0]
		ivec=[1.0, 0.0, 0.0]
		jvec=[ 0.0, 0.0, 1.0]
		lengths=[10.0, 10.0, 0.0]
		spacing=[0.5, 0.5, 0.5]
	}
}

edens {
	density='EDENS'
	density_plot='edens_plt.txt'
	gopenmol='edens.plt'
	grid(base) {    
		type=even   
		origin=[-4.0,  0.0, -4.0]  
		ivec=[1.0, 0.0, 0.0]       
		jvec=[ 0.0, 0.0, 1.0]      
		lengths=[8.0, 8.0, 0.0]    
		spacing=[0.5, 0.5, 0.5]    
#     grid_points=[5,5,0]      
		rotation=[0.0,0.0,0.0]    
	}
}
