#!/usr/bin/env @python_bin@
# -*- coding: utf-8 -*-
# vim:filetype=python:
#
# Written by Jonas Juselius <jonas.juselius@chem.uit.no> 
# University of TromsÃ¸, 2007
#

import sys,os
sys.path.append("@inst_libdir@")
os.environ['PATH']=".:@inst_bindir@:"+os.environ['PATH']

#from subprocess import Popen, PIPE
import re
import optparse
import getkw

package_version="1.5.1"

def main():
	usage="%prog [options] [config] density"
	cmdln=optparse.OptionParser(usage=usage)
	cmdln.add_option('-t', action='store', dest='title',
			help='title of job')
	cmdln.add_option('-d','--debug', action='store', dest='debug',
			help='debug level')
	cmdln.add_option('-M','--mpi', action='store_true', dest='mpirun',
			default=False, help='parallel run')
	cmdln.add_option('-o','--output', action='store', dest='outfile',
			help='base name for output file(s)')
	cmdln.add_option('-D','--debug-file', action='store', dest='debugf',
			help='debug file name')
	cmdln.add_option('-v','--verbose', action='store_true', dest='verbose',
		   help='be verbose')
	cmdln.add_option('-q','--quiet', action='store_false', dest='verbose',
		   help='be quiet')
	cmdln.add_option('-V','--version', action='store_true', dest='version',
		   help='print version number')
	(opts, args)=cmdln.parse_args()

	if opts.version:
		print "GIMIC", package_version
		sys.exit(0)

	density=None
	inpfil=None
	if (len(args) == 0):
		inpfil="gimic.inp"
	elif (len(args) == 1):
		inpfil="gimic.inp"
		density=args[0]
	elif (len(args) == 2):
		inpfil=args[0]
		density=args[1]
	else:
		cmdln.error('incorrect number of files')
		sys.exit(0)
	
	top=getkw.Section('top', callback=check_calc)
	top.set_status(True)
	top.add_kw('title', 'STR', ('',))
	top.add_kw('debug_file', 'STR', ('DEBUG.out',))
	top.add_kw('debug', 'INT', (0,))
	top.add_kw('basis', 'STR', ('mol',))
	top.add_kw('density', 'STR', 1)
	top.add_kw('mpirun', 'BOOL', (False,))
	top.add_kw('spherical', 'BOOL', (True,))
	top.add_kw('rerun', 'BOOL', (False,))
	top.add_kw('openshell', 'BOOL', (False,))
	top.add_kw('calc', 'STR', None)

	plot=getkw.Section('plot')
	plot.set_arg('BOOL', (True, ))
	plot.add_kw('plots','INT_ARRAY', None)
	plot.add_kw('vector','STR', ('',))
	plot.add_kw('modulus','STR', ('',))
	plot.add_kw('projection','STR', ('',))
	plot.add_kw('nvector','STR', ('',))
	plot.add_kw('gopenmol','STR', ('',))

	cdens=getkw.Section('cdens', req=True)
	cdens.add_kw('jtensor', 'STR', ('JTENSOR',))
	cdens.add_kw('jvector', 'STR', ('JVECTOR',))
	cdens.add_kw('diamag', 'BOOL', (True,))
	cdens.add_kw('paramag', 'BOOL', (True,))
	cdens.add_kw('orthogonal_magnet', 'BOOL', (False,))
	cdens.add_kw('scale_vectors', 'DBL', (1.0,))
	cdens.add_kw('magnet', 'DBL_ARRAY', 3, req=True)
	cdens.add_kw('spin_density', 'BOOL', (False,))
	cdens.add_sect(plot)

	grid=getkw.Section('grid', callback=check_grid)
	grid.set_arg('STR', ('std',))
	grid.add_kw("type", 'STR', ('even',))
	grid.add_kw("file", 'STR', 1)
	grid.add_kw("origin", 'DBL_ARRAY', 3)
	grid.add_kw("ivec", 'DBL_ARRAY', 3)
	grid.add_kw("jvec", 'DBL_ARRAY', 3)
	grid.add_kw("kvec", 'DBL_ARRAY', 3)
	grid.add_kw("lengths", 'DBL_ARRAY', 3)
	grid.add_kw("atoms", 'INT_ARRAY', 2)
	grid.add_kw("coord1", 'DBL_ARRAY', 3)
	grid.add_kw("coord2", 'DBL_ARRAY', 3)
	grid.add_kw("distance", 'DBL', 1)
	grid.add_kw("angle", 'DBL', 1)
	grid.add_kw("spacing", 'DBL_ARRAY', 3)
	grid.add_kw("map", 'DBL_ARRAY', 2)
	grid.add_kw("height", 'DBL_ARRAY', 2)
	grid.add_kw("width", 'DBL_ARRAY', 2)
	grid.add_kw("radius", 'DBL', 1)
	grid.add_kw("gridplot", 'INT', 1)
	grid.add_kw("grid_points", 'INT_ARRAY', 3)
	grid.add_kw("gauss_points", 'INT_ARRAY', 3)

	intgrid=getkw.Section('grid', callback=check_grid)
	intgrid.set_arg('STR', ('std',))
	intgrid.add_kw("type", 'STR', ('even',))
	intgrid.add_kw("file", 'STR', 1)
	intgrid.add_kw("origin", 'DBL_ARRAY', 3)
	intgrid.add_kw("ivec", 'DBL_ARRAY', 3)
	intgrid.add_kw("jvec", 'DBL_ARRAY', 3)
	intgrid.add_kw("kvec", 'DBL_ARRAY', 3)
	intgrid.add_kw("lengths", 'DBL_ARRAY', 3)
	intgrid.add_kw("atoms", 'INT_ARRAY', 2)
	intgrid.add_kw("coord1", 'DBL_ARRAY', 3)
	intgrid.add_kw("coord2", 'DBL_ARRAY', 3)
	intgrid.add_kw("distance", 'DBL', 1)
	intgrid.add_kw("angle", 'DBL', 1)
	intgrid.add_kw("spacing", 'DBL_ARRAY', 3)
	intgrid.add_kw("map", 'DBL_ARRAY', 2)
	intgrid.add_kw("height", 'DBL_ARRAY', 2)
	intgrid.add_kw("width", 'DBL_ARRAY', 2)
	intgrid.add_kw("radius", 'DBL', 1)
	intgrid.add_kw("gridplot", 'INT', 1)
	intgrid.add_kw("grid_points", 'INT_ARRAY', 3)
	intgrid.add_kw("gauss_points", 'INT_ARRAY', 3)

	divgrid=getkw.Section('grid', callback=check_grid)
	divgrid.set_arg('STR', ('std',))
	divgrid.add_kw("type", 'STR', ('even',))
	divgrid.add_kw("file", 'STR', 1)
	divgrid.add_kw("origin", 'DBL_ARRAY', 3)
	divgrid.add_kw("ivec", 'DBL_ARRAY', 3)
	divgrid.add_kw("jvec", 'DBL_ARRAY', 3)
	divgrid.add_kw("kvec", 'DBL_ARRAY', 3)
	divgrid.add_kw("lengths", 'DBL_ARRAY', 3)
	divgrid.add_kw("atoms", 'INT_ARRAY', 2)
	divgrid.add_kw("coord1", 'DBL_ARRAY', 3)
	divgrid.add_kw("coord2", 'DBL_ARRAY', 3)
	divgrid.add_kw("distance", 'DBL', 1)
	divgrid.add_kw("angle", 'DBL', 1)
	divgrid.add_kw("spacing", 'DBL_ARRAY', 3)
	divgrid.add_kw("map", 'DBL_ARRAY', 2)
	divgrid.add_kw("height", 'DBL_ARRAY', 2)
	divgrid.add_kw("width", 'DBL_ARRAY', 2)
	divgrid.add_kw("radius", 'DBL', 1)
	divgrid.add_kw("gridplot", 'INT', 1)
	divgrid.add_kw("grid_points", 'INT_ARRAY', 3)
	divgrid.add_kw("gauss_points", 'INT_ARRAY', 3)

	integral=getkw.Section('integral')
	integral.add_kw('lip_order', 'INT', (10,))
	integral.add_kw('interpolate', 'BOOL', (False,))
	integral.add_kw('radius', 'DBL', 1)
	integral.add_sect(intgrid)

	divj=getkw.Section('divj')
	divj.add_kw('plots', 'INT_ARRAY', None)
	divj.add_kw('gopenmol', 'STR', ('divj.plt',))
	divj.add_sect(divgrid)

	top.add_sect(cdens)
	top.add_sect(grid)
	top.add_sect(integral)
	top.add_sect(divj)
	
	if inpfil is not None:
		input=getkw.GetkwParser(top)
		inkw=input.parseFile(inpfil)
		inkw.sanitize(top)
	else:
		inkw=top

	if opts.title:
		inkw.setkw('title', opts.title)
	if opts.debug:
		inkw.setkw('debug', opts.debug)
	if opts.mpirun:
		inkw.setkw('mpirun', opts.mpirun)
	if opts.outfile:
		inkw.setkw('outfile', opts.outfile)
	if opts.debugf:
		inkw.setkw('debug_file', opts.debugf)
	if density is not None:
		inkw.setkw('density', density)

	inkw.run_callbacks(top)

	infile='GIMIC.in' + str(os.getpid())
	fd=open(infile,'w')
	print >>fd, inkw

	fd.close()
	os.system('gimic.x < ' + infile)
	os.unlink(infile)

# sanity check
def check_opt(sect,key):
	try:
		k=sect[key][0]
	except:
		print 'You have a typo in the code for key', key
		sys.exit(1)
	if k is not None:
		if k.is_set():
			return True
	return False

def check_grid(grid):
	warn="Warning: The '%s' option incompatible with '%s' type grids"
	err="Error: Required option '%s' not set for grid(%s)!"
	if not grid.is_set():
		return
	arg=grid.get_arg().arg[0]
	if (arg == 'std' or arg == 'base'):
		required=('origin', 'ivec', 'jvec', 'lengths', 'spacing')
		ignore=('file', 'atoms', 'coord1', 'coord2',
				'height', 'width', 'radius')
		for i in required:
			if not check_opt(grid,i):
				print err % (i,arg)
				sys.exit(1)
		for i in ignore:
			if check_opt(grid,i):
				print warn % (i,arg)
	elif arg == 'file': 
		required=('file',)
		ignore=('ivec', 'jvec', 'kvec', 'atoms', 'coord1', 
				'coord2', 'origin','height', 'width', 'angle', 'radius',
				'lengths','distance', 'spacing', 'map')
		for i in required:
			if not check_opt(grid,i):
				print err % (i,arg)
				sys.exit(1)
		for i in ignore:
			if check_opt(grid,i):
				print warn % (i,arg)
	elif arg == 'bond':
		required=('origin', 'height', 'width', 'distance')
		ignore=('file','ivec', 'jvec', 'kvec', 'lengths')
		for i in required:
			if not check_opt(grid,i):
				print err % (i,arg)
				sys.exit(1)
		if check_opt(grid,'atoms'):
			if check_opt(grid,'coord1') or check_opt(grid,'coord2'):
				print "Error: Both atoms and coord(s) have been specified"
				sys.exit(1)
		elif check_opt(grid,'coord1') and check_opt(grid,'coord2'):
			if check_opt(grid,'atoms'):
				print "Error: Both atom(s) and coord(s) have been specified"
				sys.exit(1)
		else:
			print "Error: Invalid bond specification"
			sys.exit(1)

		for i in ignore:
			if check_opt(grid,i):
				print warn % (i,arg)
	else:
		print "Error: unknown grid type '%s'" % arg 
		sys.exit(1)

	if grid.getkw('type')[0] == 'even':
		if check_opt(grid,'gauss_points'):
			print "Error: 'gauss_points' incompatible with type=even grids" 
			sys.exit(1)
		if  check_opt(grid,'spacing') and check_opt(grid, 'grid_points'):
			print "Error: both spacing and grid_points cannot be specified"
			sys.exit(1)
		if not check_opt(grid,'spacing') and not check_opt(grid, 'grid_points'):
			print "Error: either spacing or grid_points must be specified"
			sys.exit(1)

	if grid.getkw('type')[0] == 'gauss':
		if check_opt(grid,'spacing'):
			print "Error: 'spacing' incompatible with type=gauss grids" 
			sys.exit(1)
		if not (check_opt(grid,'gauss_points') and \
				check_opt(grid, 'grid_points')):
			print "Error: both 'grid_points' and 'gauss_points' must be \
specified"
			sys.exit(1)


def check_calc(top):
	calc=top.getkw('calc')	
	allow={'cdens':1, 'integral':1, 'divj':1, 'edens':1}
	for i in calc:
		if not allow.has_key(i):
			print 'Error: unknown option calc = ', i
			sys.exit(1)
		if not top.is_set(i):
				print 'Error: calc = %s requested, but section %s not set!'\
						% (i,i)
				sys.exit(1)

if __name__ == '__main__':
	main()

